package homework;

//шаблон класса Rectangle. В нем мы не создаем объект Rectangle
//только описываем наш квадрат - какие свойства у него есть(это поля) и как он себя ведет ( это методы)
class Rectangle {
    //у каждого квадрата мы должны знать 2 стороны - это характерезует наш квадрат, поэтому добавляем два поля для хранения этой информации
    private int a; // сторона прямоугольника
    private int b; // вторая сторона прямоугольника

    //Инициализируем поля - у нас не может быть квадрата с 0 стороной
    //Если в полях у нас есть какой-то объект - здесь только примитивы,
    //но если бы был объект то именно здесь мы бы создали их проинициализировали
    //т.е. создали через new - но только поля, не сам квадрат
    public Rectangle(int a, int b) {
        this.a = a;
        this.b = b;
    }

    //Иногда вместо инициализации в конструкторе мы используем для инициализации
    //блоки нестатические для нестатических переменных и статические для статических

    //тут нам нужно определить поместиться ли наш объект, который мы назоваем this -
    //это наш будущий объект на котором мы будем вызывать этот метод в мейне
    //поместиться ли он в другой квадрат anotherRect, про который мы ничего не знаем
    //кроме того, что он обязательно будет передан в этот метод как параметр и у него
    //обязательно будут поля - стороны прямоугольника, потому что он типа Rectangle
    public boolean canPlaceInto(Rectangle anotherRect){
        //для этого мы сравним наши стороны двух прямоугольников по размеру
        //если a нашего прямоугольника меньше или равно а другого прямоугольника и одновременно
        //b нашего прямоугольника меньше или равно b другого прямоугольника
        // или
        //если b нашего прямоугольника меньше или равно а другого прямоугольника и одновременно
        //а нашего прямоугольника меньше или равно b другого прямоугольника
        //то наш прямоугольник поместиться, иначе нет
        //Мы же не знаем где у прямоугольников более длинная и более короткая сторона

        if(this.a <= anotherRect.a && this.b <= anotherRect.b
                || this.b <= anotherRect.a && this.a <= anotherRect.b){
            return true;
        }else{
            return false;
        }
    }
}

class RectangleTest {
    public static void main(String[] args) {
        //Cоздаем квадрат r1 со сторонами 10 и 5
        Rectangle r1 = new Rectangle(10, 5);
        //Cоздаем квадрат r2 со сторонами 3 и 7
        Rectangle r2 = new Rectangle(3, 7);
        //Cоздаем квадрат r3 со сторонами 10 и 15
        Rectangle r3 = new Rectangle(10, 15);
//Сравниваем r1 и r2 Вызываем метод на нашем квадрате r1 - это вместо this, передаем квадрат r2, как аргумент - это вместо anotherRectangle
        //false
        System.out.println(r1.canPlaceInto(r2));
//Сравниваем r1 и r3 Вызываем метод на нашем квадрате r1 - это вместо this, передаем квадрат r3, как аргумент - это вместо anotherRectangle
        //true
        System.out.println(r1.canPlaceInto(r3));
//Сравниваем r2 и r3 Вызываем метод на нашем квадрате r2 - это вместо this, передаем квадрат r3, как аргумент - это вместо anotherRectangle
        //true
        System.out.println(r2.canPlaceInto(r3));
//Сравниваем r3 и r2 Вызываем метод на нашем квадрате r3 - это вместо this, передаем квадрат r2, как аргумент - это вместо anotherRectangle
        //false
        System.out.println(r3.canPlaceInto(r2));



    }
}
